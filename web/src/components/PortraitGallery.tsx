'use client';

import React, { useState } from 'react';

interface HistoricalFigure {
  name: string;
  role: string;
  period: string;
  description: string;
  imageUrl?: string;
  nationality: string;
}

interface PortraitGalleryProps {
  period: string;
  relatedFigures: string[];
}

const PortraitGallery: React.FC<PortraitGalleryProps> = ({ period, relatedFigures }) => {
  const [isVisible, setIsVisible] = useState(false);
  const [selectedFigure, setSelectedFigure] = useState<HistoricalFigure | null>(null);

  // Historical figures database
  const historicalFigures: { [key: string]: HistoricalFigure } = {
    'ho-chi-minh': {
      name: 'H·ªì Ch√≠ Minh',
      role: 'Ch·ªß t·ªãch n∆∞·ªõc Vi·ªát Nam D√¢n ch·ªß C·ªông h√≤a',
      period: '1945-1969',
      nationality: 'Vi·ªát Nam',
      description: 'L√£nh t·ª• c√°ch m·∫°ng v√† Ch·ªß t·ªãch n∆∞·ªõc ƒë·∫ßu ti√™n c·ªßa Vi·ªát Nam. L√£nh ƒë·∫°o phong tr√†o ƒë·ªôc l·∫≠p ch·ªëng th·ª±c d√¢n Ph√°p v√† sau ƒë√≥ ch·ªëng can thi·ªáp c·ªßa M·ªπ. Sinh ra v·ªõi t√™n Nguy·ªÖn Sinh Cung, Ng∆∞·ªùi ƒë√£ s·ª≠ d·ª•ng nhi·ªÅu t√™n kh√°c nhau trong su·ªët s·ª± nghi·ªáp c√°ch m·∫°ng.'
    },
    'vo-nguyen-giap': {
      name: 'V√µ Nguy√™n Gi√°p',
      role: 'ƒê·∫°i t∆∞·ªõng v√† Nh√† chi·∫øn l∆∞·ª£c qu√¢n s·ª±',
      period: '1940s-1970s',
      nationality: 'Vi·ªát Nam',
      description: 'Nh√† chi·∫øn l∆∞·ª£c qu√¢n s·ª± xu·∫•t s·∫Øc, l√£nh ƒë·∫°o qu√¢n ƒë·ªôi Vi·ªát Nam gi√†nh chi·∫øn th·∫Øng tr∆∞·ªõc c·∫£ qu√¢n Ph√°p v√† M·ªπ. ƒê∆∞·ª£c m·ªánh danh l√† "Napol√©on ƒë·ªè" v√¨ t√†i nƒÉng chi·∫øn thu·∫≠t trong chi·∫øn tranh du k√≠ch.'
    },
    'jean-leclerc': {
      name: 'Jean Leclerc',
      role: 'T∆∞ l·ªánh qu√¢n s·ª± Ph√°p',
      period: '1945-1947',
      nationality: 'Ph√°p',
      description: 'T∆∞·ªõng Ph√°p ch·ªâ huy l·ª±c l∆∞·ª£ng t·∫°i ƒê√¥ng D∆∞∆°ng sau Th·∫ø chi·∫øn II. L√£nh ƒë·∫°o ph·∫£n ·ª©ng qu√¢n s·ª± ban ƒë·∫ßu c·ªßa Ph√°p ƒë·ªëi v·ªõi tuy√™n b·ªë ƒë·ªôc l·∫≠p c·ªßa Vi·ªát Nam.'
    },
    'jean-sainteny': {
      name: 'Jean Sainteny',
      role: 'Nh√† ngo·∫°i giao Ph√°p',
      period: '1945-1946',
      nationality: 'Ph√°p',
      description: 'Nh√† ngo·∫°i giao Ph√°p ƒë√£ ƒë√†m ph√°n v·ªõi H·ªì Ch√≠ Minh v√† c√°c l√£nh ƒë·∫°o Vi·ªát Nam. ƒê√≥ng vai tr√≤ quan tr·ªçng trong c√°c th·ªèa thu·∫≠n s∆° b·ªô Ph√°p-Vi·ªát nƒÉm 1946.'
    },
    'pham-van-dong': {
      name: 'Ph·∫°m VƒÉn ƒê·ªìng',
      role: 'Th·ªß t∆∞·ªõng Ch√≠nh ph·ªß',
      period: '1945-1987',
      nationality: 'Vi·ªát Nam',
      description: 'C·ªông s·ª± th√¢n c·∫≠n c·ªßa H·ªì Ch√≠ Minh v√† Th·ªß t∆∞·ªõng l√¢u nƒÉm c·ªßa B·∫Øc Vi·ªát Nam v√† sau ƒë√≥ l√† Vi·ªát Nam th·ªëng nh·∫•t. Nh√¢n v·∫≠t quan tr·ªçng trong c√°c cu·ªôc ƒë√†m ph√°n ngo·∫°i giao.'
    },
    'truong-chinh': {
      name: 'Tr∆∞·ªùng Chinh',
      role: 'L√£nh ƒë·∫°o ƒê·∫£ng C·ªông s·∫£n',
      period: '1940s-1980s',
      nationality: 'Vi·ªát Nam',
      description: 'L√£nh ƒë·∫°o v√† nh√† l√Ω lu·∫≠n quan tr·ªçng c·ªßa ƒê·∫£ng C·ªông s·∫£n. ƒê√≥ng vai tr√≤ then ch·ªët trong c·∫£i c√°ch ru·ªông ƒë·∫•t v√† t·ªï ch·ª©c ch√≠nh tr·ªã trong th·ªùi k·ª≥ ƒë·ªôc l·∫≠p.'
    }
  };

  // Get figures relevant to the current period
  const getRelevantFigures = () => {
    return relatedFigures
      .map(figureKey => historicalFigures[figureKey])
      .filter(figure => figure !== undefined);
  };

  const getFlagEmoji = (nationality: string) => {
    switch (nationality) {
      case 'Vietnamese': return 'üáªüá≥';
      case 'French': return 'üá´üá∑';
      case 'Chinese': return 'üá®üá≥';
      default: return 'üåç';
    }
  };

  const getPortraitPlaceholder = (name: string, nationality: string) => {
    const initials = name.split(' ').map(n => n[0]).join('').substring(0, 2);
    const bgColor = nationality === 'Vietnamese' ? '#dc2626' : 
                   nationality === 'French' ? '#2563eb' : '#059669';
    
    return (
      <div 
        className="portrait-placeholder"
        style={{ backgroundColor: bgColor }}
      >
        <span>{initials}</span>
      </div>
    );
  };

  const relevantFigures = getRelevantFigures();

  if (relevantFigures.length === 0) {
    return null;
  }

  return (
    <div className="portrait-gallery-container">
      <button
        onClick={() => setIsVisible(!isVisible)}
        className="portrait-toggle-btn"
        title="Xem Nh√¢n V·∫≠t L·ªãch S·ª≠"
      >
        üë• Nh√¢n V·∫≠t ({relevantFigures.length})
      </button>

      {isVisible && (
        <div className="portrait-gallery-modal">
          <div className="portrait-gallery-content">
            <div className="gallery-header">
              <h3>Nh√¢n V·∫≠t L·ªãch S·ª≠ Quan Tr·ªçng ({period})</h3>
              <button 
                onClick={() => setIsVisible(false)}
                className="close-btn"
              >
                ‚úï
              </button>
            </div>
            
            <div className="portraits-grid">
              {relevantFigures.map((figure, index) => (
                <div 
                  key={index}
                  className="portrait-card"
                  onClick={() => setSelectedFigure(figure)}
                >
                  <div className="portrait-image">
                    {figure.imageUrl ? (
                      <img src={figure.imageUrl} alt={figure.name} />
                    ) : (
                      getPortraitPlaceholder(figure.name, figure.nationality)
                    )}
                  </div>
                  <div className="portrait-info">
                    <h4>{figure.name} {getFlagEmoji(figure.nationality)}</h4>
                    <p className="role">{figure.role}</p>
                    <p className="period">{figure.period}</p>
                  </div>
                </div>
              ))}
            </div>

            {selectedFigure && (
              <div className="figure-detail-modal">
                <div className="figure-detail-content">
                  <div className="detail-header">
                    <h3>{selectedFigure.name} {getFlagEmoji(selectedFigure.nationality)}</h3>
                    <button 
                      onClick={() => setSelectedFigure(null)}
                      className="close-btn"
                    >
                      ‚úï
                    </button>
                  </div>
                  <div className="detail-body">
                    <div className="detail-portrait">
                      {selectedFigure.imageUrl ? (
                        <img src={selectedFigure.imageUrl} alt={selectedFigure.name} />
                      ) : (
                        getPortraitPlaceholder(selectedFigure.name, selectedFigure.nationality)
                      )}
                    </div>
                    <div className="detail-info">
                      <div className="detail-field">
                        <strong>Vai Tr√≤:</strong> {selectedFigure.role}
                      </div>
                      <div className="detail-field">
                        <strong>Th·ªùi Gian:</strong> {selectedFigure.period}
                      </div>
                      <div className="detail-field">
                        <strong>Qu·ªëc T·ªãch:</strong> {selectedFigure.nationality}
                      </div>
                      <div className="detail-description">
                        <strong>Ti·ªÉu S·ª≠:</strong>
                        <p>{selectedFigure.description}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      <style jsx>{`
        .portrait-gallery-container {
          position: relative;
          display: inline-block;
          margin-left: 8px;
        }

        .portrait-toggle-btn {
          background: linear-gradient(135deg, #7c3aed, #a855f7);
          color: white;
          border: none;
          padding: 6px 12px;
          border-radius: 20px;
          cursor: pointer;
          font-size: 12px;
          font-weight: 500;
          transition: all 0.3s ease;
          box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .portrait-toggle-btn:hover {
          background: linear-gradient(135deg, #8b5cf6, #c084fc);
          transform: translateY(-1px);
          box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }

        .portrait-gallery-modal {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.8);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
          animation: fadeIn 0.3s ease;
        }

        .portrait-gallery-content {
          background: white;
          border-radius: 12px;
          max-width: 90vw;
          max-height: 90vh;
          overflow: auto;
          box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        }

        .gallery-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 20px;
          border-bottom: 1px solid #eee;
          background: linear-gradient(135deg, #7c3aed, #a855f7);
          color: white;
          border-radius: 12px 12px 0 0;
        }

        .gallery-header h3 {
          margin: 0;
          font-size: 18px;
        }

        .close-btn {
          background: none;
          border: none;
          color: white;
          font-size: 20px;
          cursor: pointer;
          padding: 5px;
          border-radius: 50%;
          width: 30px;
          height: 30px;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .close-btn:hover {
          background: rgba(255,255,255,0.2);
        }

        .portraits-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 20px;
          padding: 20px;
        }

        .portrait-card {
          background: white;
          border-radius: 12px;
          padding: 15px;
          text-align: center;
          cursor: pointer;
          transition: all 0.3s ease;
          border: 2px solid #f0f0f0;
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .portrait-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 8px 25px rgba(0,0,0,0.15);
          border-color: #7c3aed;
        }

        .portrait-image {
          width: 80px;
          height: 80px;
          margin: 0 auto 15px;
          border-radius: 50%;
          overflow: hidden;
          border: 3px solid #e5e7eb;
        }

        .portrait-image img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }

        .portrait-placeholder {
          width: 100%;
          height: 100%;
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          font-weight: bold;
          font-size: 24px;
        }

        .portrait-info h4 {
          margin: 0 0 8px 0;
          font-size: 16px;
          color: #1f2937;
        }

        .portrait-info .role {
          margin: 0 0 4px 0;
          font-size: 14px;
          color: #6b7280;
          font-weight: 500;
        }

        .portrait-info .period {
          margin: 0;
          font-size: 12px;
          color: #9ca3af;
        }

        .figure-detail-modal {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.9);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1100;
        }

        .figure-detail-content {
          background: white;
          border-radius: 12px;
          max-width: 600px;
          max-height: 80vh;
          overflow: auto;
          box-shadow: 0 25px 50px rgba(0,0,0,0.4);
        }

        .detail-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 20px;
          border-bottom: 1px solid #eee;
          background: linear-gradient(135deg, #1f2937, #374151);
          color: white;
          border-radius: 12px 12px 0 0;
        }

        .detail-header h3 {
          margin: 0;
          font-size: 20px;
        }

        .detail-body {
          padding: 20px;
        }

        .detail-portrait {
          width: 120px;
          height: 120px;
          margin: 0 auto 20px;
          border-radius: 50%;
          overflow: hidden;
          border: 4px solid #e5e7eb;
        }

        .detail-portrait img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }

        .detail-field {
          margin-bottom: 15px;
          padding: 10px;
          background: #f9fafb;
          border-radius: 6px;
        }

        .detail-field strong {
          color: #374151;
          margin-right: 8px;
        }

        .detail-description {
          margin-top: 20px;
          padding: 15px;
          background: #f0f9ff;
          border-radius: 8px;
          border-left: 4px solid #7c3aed;
        }

        .detail-description strong {
          display: block;
          margin-bottom: 10px;
          color: #1f2937;
        }

        .detail-description p {
          margin: 0;
          line-height: 1.6;
          color: #4b5563;
        }

        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }

        @media (max-width: 768px) {
          .portraits-grid {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            padding: 15px;
          }
          
          .portrait-gallery-content,
          .figure-detail-content {
            margin: 10px;
          }
        }
      `}</style>
    </div>
  );
};

export default PortraitGallery;